// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VBase$ReVerv = require("./VBase.bs.js");
var PhaserAPI$ReVerv = require("./PhaserAPI.bs.js");

function BlendMode(B) {
  var B$1 = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* BlendMode */1], /* module */[]);
  var blendMode = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.blendMode;
                }), container);
  };
  var blendModeStr = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.blendMode;
                }), container);
  };
  var setBlendModeStr = function (container) {
    return VBase$ReVerv.map((function (prim, prim$1) {
                  return prim.setBlendMode(prim$1);
                }), container);
  };
  var setBlendMode = function (container) {
    return VBase$ReVerv.map((function (__x) {
                  return (function (param) {
                      return __x.setBlendMode(param);
                    });
                }), container);
  };
  return /* module */[
          /* B */B$1,
          /* blendMode */blendMode,
          /* blendModeStr */blendModeStr,
          /* setBlendModeStr */setBlendModeStr,
          /* setBlendMode */setBlendMode
        ];
}

function ScrollFactor(SF) {
  var ScF = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* ScrollFactor */15], /* module */[]);
  var setScrollFactor = function (x, y, container) {
    if (y !== undefined) {
      var y$1 = y;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setScrollFactor(x, y$1);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setScrollFactor(x, undefined);
                  }), container);
    }
  };
  var scrollFactorX = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scrollFactorX;
                }), container);
  };
  var scrollFactorXF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scrollFactorF;
                }), container);
  };
  var scrollFactorY = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scrollFactorY;
                }), container);
  };
  var scrollFactorYF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scrollFactorY;
                }), container);
  };
  return /* module */[
          /* ScF */ScF,
          /* setScrollFactor */setScrollFactor,
          /* scrollFactorX */scrollFactorX,
          /* scrollFactorXF */scrollFactorXF,
          /* scrollFactorY */scrollFactorY,
          /* scrollFactorYF */scrollFactorYF
        ];
}

function Transform(T) {
  var T$1 = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* Transform */2], /* module */[]);
  var angle = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.angle;
                }), container);
  };
  var angleF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.angle;
                }), container);
  };
  var rotation = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.rotation;
                }), container);
  };
  var rotationF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.rotation;
                }), container);
  };
  var scale = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scale;
                }), container);
  };
  var scaleF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scale;
                }), container);
  };
  var scaleX = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scaleX;
                }), container);
  };
  var scaleXF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scaleX;
                }), container);
  };
  var scaleY = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scaleY;
                }), container);
  };
  var scaleYF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.scaleY;
                }), container);
  };
  var w = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.w;
                }), container);
  };
  var x = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.x;
                }), container);
  };
  var y = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.y;
                }), container);
  };
  var z = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.z;
                }), container);
  };
  var setX = function (x, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setX(x);
                }), container);
  };
  var setY = function (y, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setY(y);
                }), container);
  };
  var setW = function (w, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setW(w);
                }), container);
  };
  var setZ = function (z, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setZ(z);
                }), container);
  };
  var setScale = function (x, y, container) {
    if (y !== undefined) {
      var y$1 = y;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setScale(x, y$1);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setScale(x, undefined);
                  }), container);
    }
  };
  var setPosition = function ($staropt$star, y, $staropt$star$1, $staropt$star$2, container) {
    var x = $staropt$star !== undefined ? $staropt$star : 0;
    var z = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
    var w = $staropt$star$2 !== undefined ? $staropt$star$2 : 0;
    if (y !== undefined) {
      var y$1 = y;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setPosition(x, y$1, z, w);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setPosition(x, x, z, w);
                  }), container);
    }
  };
  var setRotation = function ($staropt$star, container) {
    var radians = $staropt$star !== undefined ? $staropt$star : 0;
    return VBase$ReVerv.map((function (__x) {
                  return __x.setRotation(radians);
                }), container);
  };
  var setRotationF = function ($staropt$star, container) {
    var radians = $staropt$star !== undefined ? $staropt$star : 0.0;
    return VBase$ReVerv.map((function (__x) {
                  return __x.setRotation(radians);
                }), container);
  };
  var getParentRotation = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.getParentRotation();
                }), container);
  };
  var getParentRotationF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.getParentRotation();
                }), container);
  };
  return /* module */[
          /* T */T$1,
          /* angle */angle,
          /* angleF */angleF,
          /* rotation */rotation,
          /* rotationF */rotationF,
          /* scale */scale,
          /* scaleF */scaleF,
          /* scaleX */scaleX,
          /* scaleXF */scaleXF,
          /* scaleY */scaleY,
          /* scaleYF */scaleYF,
          /* w */w,
          /* x */x,
          /* y */y,
          /* z */z,
          /* setX */setX,
          /* setY */setY,
          /* setW */setW,
          /* setZ */setZ,
          /* setScale */setScale,
          /* setPosition */setPosition,
          /* setRotation */setRotation,
          /* setRotationF */setRotationF,
          /* getParentRotation */getParentRotation,
          /* getParentRotationF */getParentRotationF
        ];
}

function Visible(V) {
  var V$1 = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* Visible */6], /* module */[]);
  var visible = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.visible;
                }), container);
  };
  var setVisible = function (container) {
    return VBase$ReVerv.map((function (prim, prim$1) {
                  return prim.setVisible(prim$1);
                }), container);
  };
  return /* module */[
          /* V */V$1,
          /* visible */visible,
          /* setVisible */setVisible
        ];
}

function Origin(O) {
  var O$1 = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* Origin */8], /* module */[]);
  var displayOriginX = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.displayOriginX;
                }), container);
  };
  var displayOriginY = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.displayOriginY;
                }), container);
  };
  var originX = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.originX;
                }), container);
  };
  var originY = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.originY;
                }), container);
  };
  var setDisplayOrigin = function ($staropt$star, y, container) {
    var x = $staropt$star !== undefined ? $staropt$star : 0.0;
    if (y !== undefined) {
      var y$1 = y;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setDisplayOrigin(x, y$1);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setDisplayOrigin(x, x);
                  }), container);
    }
  };
  var setOrigin = function ($staropt$star, y, container) {
    var x = $staropt$star !== undefined ? $staropt$star : 0.5;
    if (y !== undefined) {
      var y$1 = y;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setOrigin(x, y$1);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setOrigin(x, x);
                  }), container);
    }
  };
  var setOriginFromFrame = function (container) {
    return VBase$ReVerv.map((function (prim) {
                  return prim.setOriginFromFrame();
                }), container);
  };
  var updateDisplayOrigin = function (container) {
    return VBase$ReVerv.map((function (prim) {
                  return prim.updateDisplayOrigin();
                }), container);
  };
  return /* module */[
          /* O */O$1,
          /* displayOriginX */displayOriginX,
          /* displayOriginY */displayOriginY,
          /* originX */originX,
          /* originY */originY,
          /* setDisplayOrigin */setDisplayOrigin,
          /* setOrigin */setOrigin,
          /* setOriginFromFrame */setOriginFromFrame,
          /* updateDisplayOrigin */updateDisplayOrigin
        ];
}

function Size(S) {
  var S$1 = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* Size */9], /* module */[]);
  var displayHeight = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.displayHeight;
                }), container);
  };
  var displayHeightF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.displayHeight;
                }), container);
  };
  var displayWidth = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.displayWidth;
                }), container);
  };
  var displayWidthF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.displayWidth;
                }), container);
  };
  var height = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.height;
                }), container);
  };
  var heightF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.height;
                }), container);
  };
  var width = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.width;
                }), container);
  };
  var widthF = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.width;
                }), container);
  };
  var setSize = function (width, height, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setSize(width, height);
                }), container);
  };
  var setSizeF = function (width, height, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setSize(width, height);
                }), container);
  };
  var setDisplaySize = function (width, height, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setDisplaySize(width, height);
                }), container);
  };
  var setDisplaySizeF = function (width, height, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setDisplaySize(width, height);
                }), container);
  };
  var setSizeToFrame = function (frame, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setSizeToFrame(frame);
                }), container);
  };
  return /* module */[
          /* S */S$1,
          /* displayHeight */displayHeight,
          /* displayHeightF */displayHeightF,
          /* displayWidth */displayWidth,
          /* displayWidthF */displayWidthF,
          /* height */height,
          /* heightF */heightF,
          /* width */width,
          /* widthF */widthF,
          /* setSize */setSize,
          /* setSizeF */setSizeF,
          /* setDisplaySize */setDisplaySize,
          /* setDisplaySizeF */setDisplaySizeF,
          /* setSizeToFrame */setSizeToFrame
        ];
}

function Tint(T) {
  var PTint = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* Tint */11], /* module */[]);
  var isTinted = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.isTinted;
                }), container);
  };
  var tint = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.tint;
                }), container);
  };
  var tintBottomLeft = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.tintBottomLeft;
                }), container);
  };
  var tintBottomRight = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.tintBottomRight;
                }), container);
  };
  var tintFill = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.tintFill;
                }), container);
  };
  var tintTopLeft = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.tintTopLeft;
                }), container);
  };
  var tintTopRight = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.tintTopRight;
                }), container);
  };
  var clearTint = function (container) {
    return VBase$ReVerv.map((function (prim) {
                  return prim.clearTint();
                }), container);
  };
  var setTintFill = function (topLeft, topRight, bottomLeft, bottomRight, container) {
    if (topLeft !== undefined) {
      var topLeft$1 = topLeft;
      if (topRight !== undefined) {
        var topRight$1 = topRight;
        if (bottomLeft !== undefined) {
          var bottomLeft$1 = bottomLeft;
          if (bottomRight !== undefined) {
            var bottomRight$1 = bottomRight;
            return VBase$ReVerv.map((function (__x) {
                          return __x.setTintFill(topLeft$1, topRight$1, bottomLeft$1, bottomRight$1);
                        }), container);
          } else {
            return VBase$ReVerv.map((function (__x) {
                          return __x.setTintFill(topLeft$1, topRight$1, bottomLeft$1, undefined);
                        }), container);
          }
        } else if (bottomRight !== undefined) {
          var bottomRight$2 = bottomRight;
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTintFill(topLeft$1, topRight$1, undefined, bottomRight$2);
                      }), container);
        } else {
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTintFill(topLeft$1, topRight$1, undefined, undefined);
                      }), container);
        }
      } else if (bottomLeft !== undefined) {
        var bottomLeft$2 = bottomLeft;
        if (bottomRight !== undefined) {
          var bottomRight$3 = bottomRight;
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTintFill(topLeft$1, undefined, bottomLeft$2, bottomRight$3);
                      }), container);
        } else {
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTintFill(topLeft$1, undefined, bottomLeft$2, undefined);
                      }), container);
        }
      } else if (bottomRight !== undefined) {
        var bottomRight$4 = bottomRight;
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTintFill(topLeft$1, undefined, undefined, bottomRight$4);
                    }), container);
      } else {
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTintFill(topLeft$1, undefined, undefined, undefined);
                    }), container);
      }
    } else if (topRight !== undefined) {
      var topRight$2 = topRight;
      if (bottomLeft !== undefined) {
        var bottomLeft$3 = bottomLeft;
        if (bottomRight !== undefined) {
          var bottomRight$5 = bottomRight;
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTintFill(undefined, topRight$2, bottomLeft$3, bottomRight$5);
                      }), container);
        } else {
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTintFill(undefined, topRight$2, bottomLeft$3, undefined);
                      }), container);
        }
      } else if (bottomRight !== undefined) {
        var bottomRight$6 = bottomRight;
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTintFill(undefined, topRight$2, undefined, bottomRight$6);
                    }), container);
      } else {
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTintFill(undefined, topRight$2, undefined, undefined);
                    }), container);
      }
    } else if (bottomLeft !== undefined) {
      var bottomLeft$4 = bottomLeft;
      if (bottomRight !== undefined) {
        var bottomRight$7 = bottomRight;
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTintFill(undefined, undefined, bottomLeft$4, bottomRight$7);
                    }), container);
      } else {
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTintFill(undefined, undefined, bottomLeft$4, undefined);
                    }), container);
      }
    } else if (bottomRight !== undefined) {
      var bottomRight$8 = bottomRight;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setTintFill(undefined, undefined, undefined, bottomRight$8);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setTintFill(undefined, undefined, undefined, undefined);
                  }), container);
    }
  };
  var setTint = function (topLeft, topRight, bottomLeft, bottomRight, container) {
    if (topLeft !== undefined) {
      var topLeft$1 = topLeft;
      if (topRight !== undefined) {
        var topRight$1 = topRight;
        if (bottomLeft !== undefined) {
          var bottomLeft$1 = bottomLeft;
          if (bottomRight !== undefined) {
            var bottomRight$1 = bottomRight;
            return VBase$ReVerv.map((function (__x) {
                          return __x.setTint(topLeft$1, topRight$1, bottomLeft$1, bottomRight$1);
                        }), container);
          } else {
            return VBase$ReVerv.map((function (__x) {
                          return __x.setTint(topLeft$1, topRight$1, bottomLeft$1, undefined);
                        }), container);
          }
        } else if (bottomRight !== undefined) {
          var bottomRight$2 = bottomRight;
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTint(topLeft$1, topRight$1, undefined, bottomRight$2);
                      }), container);
        } else {
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTint(topLeft$1, topRight$1, undefined, undefined);
                      }), container);
        }
      } else if (bottomLeft !== undefined) {
        var bottomLeft$2 = bottomLeft;
        if (bottomRight !== undefined) {
          var bottomRight$3 = bottomRight;
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTint(topLeft$1, undefined, bottomLeft$2, bottomRight$3);
                      }), container);
        } else {
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTint(topLeft$1, undefined, bottomLeft$2, undefined);
                      }), container);
        }
      } else if (bottomRight !== undefined) {
        var bottomRight$4 = bottomRight;
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTint(topLeft$1, undefined, undefined, bottomRight$4);
                    }), container);
      } else {
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTint(topLeft$1, undefined, undefined, undefined);
                    }), container);
      }
    } else if (topRight !== undefined) {
      var topRight$2 = topRight;
      if (bottomLeft !== undefined) {
        var bottomLeft$3 = bottomLeft;
        if (bottomRight !== undefined) {
          var bottomRight$5 = bottomRight;
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTint(undefined, topRight$2, bottomLeft$3, bottomRight$5);
                      }), container);
        } else {
          return VBase$ReVerv.map((function (__x) {
                        return __x.setTint(undefined, topRight$2, bottomLeft$3, undefined);
                      }), container);
        }
      } else if (bottomRight !== undefined) {
        var bottomRight$6 = bottomRight;
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTint(undefined, topRight$2, undefined, bottomRight$6);
                    }), container);
      } else {
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTint(undefined, topRight$2, undefined, undefined);
                    }), container);
      }
    } else if (bottomLeft !== undefined) {
      var bottomLeft$4 = bottomLeft;
      if (bottomRight !== undefined) {
        var bottomRight$7 = bottomRight;
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTint(undefined, undefined, bottomLeft$4, bottomRight$7);
                    }), container);
      } else {
        return VBase$ReVerv.map((function (__x) {
                      return __x.setTint(undefined, undefined, bottomLeft$4, undefined);
                    }), container);
      }
    } else if (bottomRight !== undefined) {
      var bottomRight$8 = bottomRight;
      return VBase$ReVerv.map((function (__x) {
                    return __x.setTint(undefined, undefined, undefined, bottomRight$8);
                  }), container);
    } else {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setTint(undefined, undefined, undefined, undefined);
                  }), container);
    }
  };
  return /* module */[
          /* PTint */PTint,
          /* isTinted */isTinted,
          /* tint */tint,
          /* tintBottomLeft */tintBottomLeft,
          /* tintBottomRight */tintBottomRight,
          /* tintFill */tintFill,
          /* tintTopLeft */tintTopLeft,
          /* tintTopRight */tintTopRight,
          /* clearTint */clearTint,
          /* setTintFill */setTintFill,
          /* setTint */setTint
        ];
}

function Flip(F) {
  var F$1 = Curry._1(PhaserAPI$ReVerv.GameObjects[/* Components */1][/* Flip */14], /* module */[]);
  var flipX = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.flipX;
                }), container);
  };
  var flipY = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.flipY;
                }), container);
  };
  var resetFlip = function (container) {
    return VBase$ReVerv.flatMap((function (prim) {
                  return prim.resetFlip();
                }), container);
  };
  var setFlip = function (x, y, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setFlip(x, y);
                }), container);
  };
  var setFlipX = function (x, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setFlipX(x);
                }), container);
  };
  var setFlipY = function (y, container) {
    return VBase$ReVerv.map((function (__x) {
                  return __x.setFlipY(y);
                }), container);
  };
  var toggleFlipX = function (container) {
    return VBase$ReVerv.map((function (prim) {
                  return prim.toggleFlipX();
                }), container);
  };
  var toggleFlipY = function (container) {
    return VBase$ReVerv.map((function (prim) {
                  return prim.toggleFlipY();
                }), container);
  };
  return /* module */[
          /* F */F$1,
          /* flipX */flipX,
          /* flipY */flipY,
          /* resetFlip */resetFlip,
          /* setFlip */setFlip,
          /* setFlipX */setFlipX,
          /* setFlipY */setFlipY,
          /* toggleFlipX */toggleFlipX,
          /* toggleFlipY */toggleFlipY
        ];
}

exports.BlendMode = BlendMode;
exports.ScrollFactor = ScrollFactor;
exports.Transform = Transform;
exports.Visible = Visible;
exports.Origin = Origin;
exports.Size = Size;
exports.Tint = Tint;
exports.Flip = Flip;
/* No side effect */
