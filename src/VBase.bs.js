// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function map(f, vervComponent) {
  return /* VervEffect */[Curry._1(f, vervComponent[0])];
}

function flatMap(f, vervComponent) {
  return Curry._1(f, vervComponent[0]);
}

function $bang$great(value) {
  return /* VervEffect */[value];
}

function lift(value) {
  return /* VervEffect */[value];
}

function $less$less$eq(vervContainer, f) {
  return /* VervEffect */[Curry._1(f, vervContainer[0])];
}

function useState(fn) {
  var initial = /* record */[/* contents */Curry._1(fn, /* () */0)];
  return /* tuple */[
          initial,
          (function (param) {
              var wrappedValue = initial;
              var fn = param;
              wrappedValue[0] = Curry._1(fn, wrappedValue[0]);
              return wrappedValue[0];
            })
        ];
}

function useReducer(fn, state) {
  return /* tuple */[
          state,
          Curry._1(fn, state)
        ];
}

function combineReducers(fn, reducers) {
  return Curry._1(fn, reducers);
}

function useEffect(fn) {
  return Curry._1(fn, /* () */0);
}

function useEffectWithCleanup(fn, cleanupFn) {
  Curry._1(fn, /* () */0);
  return Curry._1(cleanupFn, /* () */0);
}

function useSideEffect(fn) {
  return Curry._1(fn, /* () */0);
}

function useSideEffectWithCleanup(fn, cleanupFn) {
  Curry._1(fn, /* () */0);
  return Curry._1(cleanupFn, /* () */0);
}

function zeroCallback(fn) {
  return (function () {
      var $$this = this ;
      Curry._1(fn, $$this);
      return /* () */0;
    });
}

function dataCallback(fn) {
  return (function (data) {
      var $$this = this ;
      Curry._2(fn, $$this, data);
      return /* () */0;
    });
}

exports.map = map;
exports.flatMap = flatMap;
exports.$bang$great = $bang$great;
exports.lift = lift;
exports.$less$less$eq = $less$less$eq;
exports.useState = useState;
exports.useReducer = useReducer;
exports.combineReducers = combineReducers;
exports.useEffect = useEffect;
exports.useEffectWithCleanup = useEffectWithCleanup;
exports.useSideEffect = useSideEffect;
exports.useSideEffectWithCleanup = useSideEffectWithCleanup;
exports.zeroCallback = zeroCallback;
exports.dataCallback = dataCallback;
/* No side effect */
