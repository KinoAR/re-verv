// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var VBase$ReVerv = require("./VBase.bs.js");

var Static = /* module */[];

function allowDrag(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.allowDrag;
              }), param);
}

function allowGravity(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.allowGravity;
              }), param);
}

function angle(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angle;
              }), param);
}

function angleF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angle;
              }), param);
}

function angularAcceleration(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angularAcceleration;
              }), param);
}

function angularAccelerationF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angularAcceleration;
              }), param);
}

function angularDrag(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angularDrag;
              }), param);
}

function angularDragF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angularDrag;
              }), param);
}

function angularVelocity(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angularVelocity;
              }), param);
}

function angularVelocityF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.angularVelocity;
              }), param);
}

function bottom(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.bottom;
              }), param);
}

function collideWorldBounds(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.collideWorldBounds;
              }), param);
}

function customSeparateX(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.customSeparateX;
              }), param);
}

function customSeparateY(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.customSeparateY;
              }), param);
}

function debugBodyColor(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.debugBodyColor;
              }), param);
}

function debugShowBody(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.debugShowBody;
              }), param);
}

function embedded(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.embedded;
              }), param);
}

function enabled(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.enable;
              }), param);
}

function facing(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.facing;
              }), param);
}

function gameObject(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.gameObject;
              }), param);
}

function halfHeight(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.halfHeight;
              }), param);
}

function halfHeightF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.halfHeight;
              }), param);
}

function halfWidth(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.halfWidth;
              }), param);
}

function halfWidthF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.halfWidth;
              }), param);
}

function height(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.height;
              }), param);
}

function heightF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.height;
              }), param);
}

function immovable(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.immovable;
              }), param);
}

function mass(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.mass;
              }), param);
}

function massF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.mass;
              }), param);
}

function moves(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.moves;
              }), param);
}

function touching(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.touching;
              }), param);
}

function onCollide(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.onCollide;
              }), param);
}

function onOverlap(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.onOverlap;
              }), param);
}

function onWorldBounds(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.onWorldBounds;
              }), param);
}

function overlapR(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.overlapR;
              }), param);
}

function overlapRF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.overlapR;
              }), param);
}

function overlapX(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.overlapX;
              }), param);
}

function overlapXF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.overlapX;
              }), param);
}

function overlapY(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.overlapY;
              }), param);
}

function overlapYF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.overlapY;
              }), param);
}

function preRotation(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.preRotation;
              }), param);
}

function preRotationF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.preRotationF;
              }), param);
}

function physicsType(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.physicsType;
              }), param);
}

function radius(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.radius;
              }), param);
}

function radiusF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.radius;
              }), param);
}

function right(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.right;
              }), param);
}

function rightF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.right;
              }), param);
}

function rotation(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.rotation;
              }), param);
}

function rotationF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.rotation;
              }), param);
}

function sourceHeight(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.sourceHeight;
              }), param);
}

function sourceHeightF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.sourceHeight;
              }), param);
}

function sourceWidth(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.sourceWidth;
              }), param);
}

function sourceWidthF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.sourceWidth;
              }), param);
}

function width(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.width;
              }), param);
}

function widthF(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.width;
              }), param);
}

function deltaAbsX(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.deltaAbsX();
              }), param);
}

function deltaAbsY(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.deltaAbsY();
              }), param);
}

function deltaX(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.deltaX();
              }), param);
}

function deltaY(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.deltaY();
              }), param);
}

function deltaZ(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.deltaZ();
              }), param);
}

function onCeiling(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.onCeiling();
              }), param);
}

function onFloor(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.onFloor();
              }), param);
}

function onWall(param) {
  return VBase$ReVerv.flatMap((function (prim) {
                return prim.onWall();
              }), param);
}

function reset(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    __x.reset(x, y);
                    return /* () */0;
                  }), param);
    });
}

function resetF(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    __x.reset(x, y);
                    return /* () */0;
                  }), param);
    });
}

function setAllowDrag(allow) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAllowDrag(allow);
                  }), param);
    });
}

function setAllowGravity(allow) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAllowGravity(allow);
                  }), param);
    });
}

function setAllowRotation(allow) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAllowRotation(allow);
                  }), param);
    });
}

function setAngularAcceleration(acceleration) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAngularAcceleration(acceleration);
                  }), param);
    });
}

function setAngularAccelerationF(acceleration) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAngularAccleration(acceleration);
                  }), param);
    });
}

function setAngularDrag(drag) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAngularDrag(drag);
                  }), param);
    });
}

function setAngularDragF(drag) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setAngularDrag(drag);
                  }), param);
    });
}

function setBounce(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setBounce(x, y);
                  }), param);
    });
}

function setBounceF(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setBounce(x, y);
                  }), param);
    });
}

function setBounceX(x) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setBounceX(x);
                  }), param);
    });
}

function setBounceXF(x) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setBounceX(x);
                  }), param);
    });
}

function setBounceY(y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setBounceY(y);
                  }), param);
    });
}

function setBounceYF(y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setBounceYF(y);
                  }), param);
    });
}

function setOffset(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setOffset(x, y);
                  }), param);
    });
}

function setOffsetF(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setOffset(x, y);
                  }), param);
    });
}

function setDrag(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setDrag(x, y);
                  }), param);
    });
}

function setDragF(x, y) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setDrag(x, y);
                  }), param);
    });
}

function setDragX(x) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setDragX(x);
                  }), param);
    });
}

function setDragXF(x) {
  return (function (param) {
      return VBase$ReVerv.map((function (__x) {
                    return __x.setDragX(x);
                  }), param);
    });
}

function stop(param) {
  return VBase$ReVerv.map((function (prim) {
                return prim.stop();
              }), param);
}

var Dynamic = /* module */[
  /* PABody */0,
  /* allowDrag */allowDrag,
  /* allowGravity */allowGravity,
  /* angle */angle,
  /* angleF */angleF,
  /* angularAcceleration */angularAcceleration,
  /* angularAccelerationF */angularAccelerationF,
  /* angularDrag */angularDrag,
  /* angularDragF */angularDragF,
  /* angularVelocity */angularVelocity,
  /* angularVelocityF */angularVelocityF,
  /* bottom */bottom,
  /* collideWorldBounds */collideWorldBounds,
  /* customSeparateX */customSeparateX,
  /* customSeparateY */customSeparateY,
  /* debugBodyColor */debugBodyColor,
  /* debugShowBody */debugShowBody,
  /* embedded */embedded,
  /* enabled */enabled,
  /* facing */facing,
  /* gameObject */gameObject,
  /* halfHeight */halfHeight,
  /* halfHeightF */halfHeightF,
  /* halfWidth */halfWidth,
  /* halfWidthF */halfWidthF,
  /* height */height,
  /* heightF */heightF,
  /* immovable */immovable,
  /* mass */mass,
  /* massF */massF,
  /* moves */moves,
  /* touching */touching,
  /* onCollide */onCollide,
  /* onOverlap */onOverlap,
  /* onWorldBounds */onWorldBounds,
  /* overlapR */overlapR,
  /* overlapRF */overlapRF,
  /* overlapX */overlapX,
  /* overlapXF */overlapXF,
  /* overlapY */overlapY,
  /* overlapYF */overlapYF,
  /* preRotation */preRotation,
  /* preRotationF */preRotationF,
  /* physicsType */physicsType,
  /* radius */radius,
  /* radiusF */radiusF,
  /* right */right,
  /* rightF */rightF,
  /* rotation */rotation,
  /* rotationF */rotationF,
  /* sourceHeight */sourceHeight,
  /* sourceHeightF */sourceHeightF,
  /* sourceWidth */sourceWidth,
  /* sourceWidthF */sourceWidthF,
  /* width */width,
  /* widthF */widthF,
  /* deltaAbsX */deltaAbsX,
  /* deltaAbsY */deltaAbsY,
  /* deltaX */deltaX,
  /* deltaY */deltaY,
  /* deltaZ */deltaZ,
  /* onCeiling */onCeiling,
  /* onFloor */onFloor,
  /* onWall */onWall,
  /* reset */reset,
  /* resetF */resetF,
  /* setAllowDrag */setAllowDrag,
  /* setAllowGravity */setAllowGravity,
  /* setAllowRotation */setAllowRotation,
  /* setAngularAcceleration */setAngularAcceleration,
  /* setAngularAccelerationF */setAngularAccelerationF,
  /* setAngularDrag */setAngularDrag,
  /* setAngularDragF */setAngularDragF,
  /* setBounce */setBounce,
  /* setBounceF */setBounceF,
  /* setBounceX */setBounceX,
  /* setBounceXF */setBounceXF,
  /* setBounceY */setBounceY,
  /* setBounceYF */setBounceYF,
  /* setOffset */setOffset,
  /* setOffsetF */setOffsetF,
  /* setDrag */setDrag,
  /* setDragF */setDragF,
  /* setDragX */setDragX,
  /* setDragXF */setDragXF,
  /* stop */stop
];

var World = /* module */[];

exports.Static = Static;
exports.Dynamic = Dynamic;
exports.World = World;
/* No side effect */
