// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Phaser = require("phaser");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var phaser = Phaser;

var auto = phaser.AUTO;

var canvas = phaser.CANVAS;

var headless = phaser.HEADLESS;

var webgl = phaser.WEBGL;

function createGame(renderer, parent, width, height, scene) {
  return new Phaser.Game({
              type: renderer,
              parent: parent,
              width: width,
              height: height,
              scene: scene
            });
}

function zeroCallback(fn) {
  return (function () {
      var $$this = this ;
      Curry._1(fn, $$this);
      return /* () */0;
    });
}

function dataCallback(fn) {
  return (function (data) {
      var scene = this ;
      Curry._2(fn, scene, data);
      return /* () */0;
    });
}

function createScene(key, init, preload, create, update, param) {
  var scene = new Phaser.Scene({
        key: key
      });
  if (init !== undefined) {
    scene.init = Caml_option.valFromOption(init);
  }
  if (create !== undefined) {
    scene.create = Caml_option.valFromOption(create);
  }
  if (preload !== undefined) {
    scene.preload = preload;
  }
  if (update !== undefined) {
    scene.update(Curry._1(update, scene));
  }
  return scene;
}

function MakeLoader(S) {
  var scene = S[/* scene */0];
  var loader = function (param) {
    return scene.load;
  };
  var keyExists = function (keyName) {
    return scene.load.keyExists(keyName);
  };
  var loadImage = function (imageName, url) {
    return scene.load.image({
                key: imageName,
                url: url
              });
  };
  var loadAudio = function (audioName, urls) {
    return scene.load.audio({
                key: audioName,
                url: urls
              });
  };
  var loadCSS = function (cssName, url) {
    return scene.load.css({
                key: cssName,
                url: url
              });
  };
  return /* module */[
          /* scene */scene,
          /* loader */loader,
          /* keyExists */keyExists,
          /* loadImage */loadImage,
          /* loadAudio */loadAudio,
          /* loadCSS */loadCSS
        ];
}

function MakeGameObjFactory(A) {
  var scene = A[/* scene */0];
  var addImage = function (x, y, texture, frame, param) {
    var factory = scene.add;
    if (frame !== undefined) {
      return factory.image(x, y, texture, frame);
    } else {
      return factory.image(x, y, texture, undefined);
    }
  };
  return /* module */[
          /* scene */scene,
          /* addImage */addImage,
          /* addBitmapText : () */0
        ];
}

var Vector2 = 0;

var $$Image = 0;

var Input = 0;

var Tween = 0;

var $$Text = 0;

var BitMapText = 0;

var Shape = 0;

exports.phaser = phaser;
exports.auto = auto;
exports.canvas = canvas;
exports.headless = headless;
exports.webgl = webgl;
exports.createGame = createGame;
exports.zeroCallback = zeroCallback;
exports.dataCallback = dataCallback;
exports.createScene = createScene;
exports.Vector2 = Vector2;
exports.$$Image = $$Image;
exports.Input = Input;
exports.Tween = Tween;
exports.$$Text = $$Text;
exports.BitMapText = BitMapText;
exports.Shape = Shape;
exports.MakeLoader = MakeLoader;
exports.MakeGameObjFactory = MakeGameObjFactory;
/* phaser Not a pure module */
